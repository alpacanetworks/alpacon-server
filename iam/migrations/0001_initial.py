# Generated by Django 4.0.6 on 2022-09-06 12:56

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='added at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(editable=False, null=True, verbose_name='deleted at')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('tags', models.CharField(blank=True, default='', help_text='Add tags for this user so that people can find easily. Tags should start with "#" and be comma-separated.', max_length=128, verbose_name='tags')),
                ('description', models.TextField(blank=True, default='', help_text='Markdown is supported.', verbose_name='description')),
                ('uid', models.PositiveIntegerField(blank=True, help_text='This UID will be used when creating an account on a server. This value should be unique. If this field is blank, we will automatically assign a unique value starting from 2000.', null=True, unique=True, verbose_name='UID')),
                ('shell', models.CharField(blank=True, default='/bin/bash', help_text='An absolute path for a shell of choice.', max_length=64, verbose_name='shell')),
                ('home_directory', models.CharField(blank=True, default='', help_text='An absolute path for the user\'s home directory. If this field is blank, "/home/<username>/" will be the default.', max_length=128, verbose_name='home directory')),
                ('is_ldap_user', models.BooleanField(default=False, help_text='Designates that this user is a LDAP user.', verbose_name='LDAP status')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'get_latest_by': 'added_at',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='added at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(editable=False, null=True, verbose_name='deleted at')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(help_text='A name should only use letters, numbers, "_", and "-". No special characters or whitespaces allowed.', max_length=128, unique=True, verbose_name='name')),
                ('display_name', models.CharField(help_text='This name will be used to display on the screen.', max_length=128, unique=True, verbose_name='display name')),
                ('tags', models.CharField(blank=True, default='', help_text='Add tags for this group so that people can find easily. Tags should start with "#" and be comma-separated.', max_length=128, verbose_name='tags')),
                ('description', models.TextField(blank=True, default='', help_text='Markdown is supported.', verbose_name='description')),
                ('gid', models.PositiveIntegerField(blank=True, help_text='This GID will be used when creating a group on a server. This value should be unique. If this field is blank, we will automatically assign a unique value starting from 500.', null=True, unique=True, verbose_name='GID')),
                ('is_ldap_group', models.BooleanField(default=False, help_text='Designates that this group is a LDAP group.', verbose_name='LDAP status')),
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
                'get_latest_by': 'added_at',
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='added at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(editable=False, null=True, verbose_name='deleted at')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('member', 'Member'), ('manager', 'Manager'), ('owner', 'Owner')], default='member', help_text='Select a role for this user in the group.', max_length=16, verbose_name='role')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='iam.group', verbose_name='group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'membership',
                'verbose_name_plural': 'memberships',
                'unique_together': {('user', 'group')},
            },
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='users', related_query_name='user', through='iam.Membership', to='iam.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
